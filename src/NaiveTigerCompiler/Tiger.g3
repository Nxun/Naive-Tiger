grammar Tiger;

options
{
    language=CSharp3;
    TokenLabelType=CommonToken;
}

@header
{
	using NaiveTigerCompiler.AbstractSyntax;
	using NaiveTigerCompiler.SymbolTable;
}

@lexer::namespace{NaiveTigerCompiler}
@parser::namespace{NaiveTigerCompiler}



/*
 * Parser Rules
 */

public
program returns [Expression r]
	:	expression
		{
			$r = $expression.r;
		}
	;

expression returns [Expression r]
	:	orExpression
		{
			$r = $orExpression.r;
		}
	;

orExpression returns [Expression r]
	:	a = andExpression
		{
			$r = $a.r;
		}
		(Or b = andExpression
		{
			$r = new IfExpression(new Position($Or), $r, new IntegerExpression(new Position($Or), 1), $b.r);
		}
		)* 
	;

andExpression returns [Expression r]
	:	a = relationalExpression
		{
			$r = $a.r;
		}
		(And b = relationalExpression
		{
			$r = new IfExpression(new Position($And), $r, $b.r, new IntegerExpression(new Position($And), 0));
		}
		)*
	;

relationalExpression returns [Expression r]
@init
{
	Operator op = 0;
}
	:	a = additiveExpression
		{
			$r = $a.r;
		}
		((
			o = Equal {op = Operator.Equal;}
		|	o = NotEqual {op = Operator.NotEqual;}
		|	o = LessThan {op = Operator.LessThan;}
		|	o = LessEqual {op = Operator.LessEqual;}
		|	o = GreaterThan {op = Operator.GreaterThan;}
		|	o = GreaterEqual {op = Operator.GreaterThan;}
		) b = additiveExpression
		{
			$r = new OperatorExpression(new Position($o), $a.r, op, $b.r);
		})?
	;

additiveExpression returns [Expression r]
@init
{
	Operator op = 0;
}
	:	a = multiplicativeExpression
		{
			$r = $a.r;
		}
		((
			o = Plus {op = Operator.Plus;}
		|	o = Minus {op = Operator.Minus;}
		) b = multiplicativeExpression
		{
			$r = new OperatorExpression(new Position($o), $r, op, $b.r);
		}
		)*
	;

multiplicativeExpression returns [Expression r]
@init
{
	Operator op = 0;
}
	:	a = expressionAtom
		{
			$r = $a.r;
		}
		((
			o = Times {op = Operator.Times;}
		|	o = Divide {op = Operator.Divide;}
		) b = expressionAtom
		{
			$r = new OperatorExpression(new Position($o), $r, op, $b.r);
		}
		)*
	;


expressionAtom returns [Expression r]
options
{
	backtrack = true;
	memoize = true;
}
scope
{
	Expression rr;
}
@init
{
	bool flag = false;
}
@after
{
	if ($r == null)
	{
		$r = $expressionAtom::rr;
	}
}
	:	StringLiteral
		{
			$r = new StringExpression(new Position($StringLiteral), $StringLiteral.Text);
		}
	|	IntegerLiteral // 123
		{
			$r = new IntegerExpression(new Position($IntegerLiteral), int.Parse($IntegerLiteral.Text));
		}
	|	Nil
		{
			$r = new NilExpression(new Position($Nil));
		}
	|	Minus expression // -123
		{
			$r = new OperatorExpression(new Position($Minus), new IntegerExpression(new Position($Minus), 0), Operator.Minus, $expression.r);
		}
	|	lvalue Assign expression // a := 123
		{
			$expressionAtom::rr = new AssignExpression($lvalue.p, $lvalue.r, $expression.r);
		}
	|	Identifier LeftParen expressionList? RightParen // function: foo(1, 2)
		{
			$expressionAtom::rr = new CallExpression(new Position($Identifier), Symbol.GetSymbol($Identifier.Text), $expressionList.r);
		}
	|	LeftParen expressionSequence? RightParen // (a = 1; b = 2)
		{
			$r = new SequenceExpression(new Position($LeftParen), $expressionSequence.r);
		}
	|	Identifier LeftBrace fieldList RightBrace // record {id = 2}
		{
			$expressionAtom::rr = new RecordExpression(new Position($Identifier), Symbol.GetSymbol($Identifier.Text), $fieldList.r);
		}
	|	Identifier LeftBrack size = expression RightBrack Of init = expression // intArray [10] of 0
		{
			$expressionAtom::rr = new ArrayExpression(new Position($Identifier), Symbol.GetSymbol($Identifier.Text), $size.r, $init.r);
		}
	|	If test = expression Then then = expression (Else els = expression {flag = true;})? // if-then(-else)
		{
			if (flag)
			{
				$r = new IfExpression(new Position($If), $test.r, $then.r, $els.r);
			}
			else
			{
				$r = new IfExpression(new Position($If), $test.r, $then.r);
			}
		}
	|	While test = expression Do body = expression // while-do
		{
			$r = new WhileExpression(new Position($While), $test.r, $body.r);
		}
	|	For Identifier Assign e = expression To high = expression Do body = expression // for-to-do
		{
			VariableDeclaration v = new VariableDeclaration(new Position($Identifier), Symbol.GetSymbol($Identifier.Text), new NameType(new Position($Identifier), Symbol.GetSymbol("int")), $e.r);
			$r = new ForExpression(new Position($For), v, $high.r, $body.r);
		}
	|	Break // break
		{
			$r = new BreakExpression(new Position($Break));
		}
	|	Let declarationList In expressionSequence? End // let-in-end
		{
			SequenceExpression seq = new SequenceExpression(new Position($In), $expressionSequence.r);
			$r = new LetExpression(new Position($Let), $declarationList.r, seq);
		}
	|	lvalue // a
		{
			$r = new VariableExpression($lvalue.p, $lvalue.r);
		}
	;

expressionSequence returns [ExpressionList r]
@init
{
	ExpressionList t = null;
}
	:	a = expression
		{
			$r = new ExpressionList($a.r, null);
			t = $r;
		}
		(Semicolon b = expression
		{
			t.Tail = new ExpressionList($b.r, null);
			t = t.Tail;
		}
		)* // 1; 2
	;

expressionList returns [ExpressionList r]
@init
{
	ExpressionList t = null;
}
	:	a = expression
		{
			$r = new ExpressionList($a.r, null);
			t = $r;
		}
		(Comma b = expression
		{
			t.Tail = new ExpressionList($b.r, null);
			t = t.Tail;
		}
		)* // 1, 2
	;

fieldList returns [FieldExpressionList r]
@init
{
	FieldExpressionList t = null;
}
	:	a = field
		{
			$r = $a.r;
			t = $r;
		}
		(Comma b = field
		{
			t.Tail = $b.r;
			t = t.Tail;
		}
		)* // a = 1, b = 2
	;

field returns [FieldExpressionList r]
	:	Identifier Equal expression // a = 1
		{
			$r = new FieldExpressionList(new Position($Identifier), Symbol.GetSymbol($Identifier.Text), $expression.r, null);
		}
	;

lvalue returns [Variable r, Position p]
	:	id1 = Identifier
		{
			$p = new Position($id1);
			$r = new SimpleVariable(new Position($id1), Symbol.GetSymbol($id1.Text));
		}
		(
			Dot id2 = Identifier
			{
				$r = new FieldVariable(new Position($id2), $r, Symbol.GetSymbol($id2.Text));
			}
		|	LeftBrack expression RightBrack
			{
				$r = new SubscriptVariable(new Position($LeftBrack), $r, $expression.r);
			}
		)*
	;

declarationList returns [DeclarationList r]
@init
{
	DeclarationList t = null;
}
	:	(declaration
		{
			if (t == null)
			{
				$r = new DeclarationList($declaration.r, null);
				t = $r;
			}
			else
			{
				t.Tail = new DeclarationList($declaration.r, null);
				t = t.Tail;
			}
		}
		)+
	;

declaration returns [Declaration r]
	:	typeDeclarationList
		{
			$r = $typeDeclarationList.r;
		}
	|	variableDeclaration
		{
			$r = $variableDeclaration.r;
		}
	|	functionDeclarationList
		{
			$r = $functionDeclarationList.r;
		}
	;

typeDeclarationList returns [TypeDeclaration r]
@init
{
	TypeDeclaration t = null;
}
	:	(typeDeclaration
		{
			if (t == null)
			{
				$r = $typeDeclaration.r;
				t = $r;
			}
			else
			{
				t.Next = $typeDeclaration.r;
				t = t.Next;
			}
		}
		)+
	;

typeDeclaration returns [TypeDeclaration r]
	:	Type Identifier Equal type // type intArray = *
		{
			$r = new TypeDeclaration(new Position($Type), Symbol.GetSymbol($Identifier.Text), $type.r, null);
		}
	;

type returns [Type r]
@init
{
	bool flag = false;
}
	:	Identifier // int
		{
			$r = new NameType(new Position($Identifier), Symbol.GetSymbol($Identifier.Text));
		}
	|	LeftBrace (typeFieldList {flag = true;})? RightBrace // record type: {a : int}
		{
			$r = new RecordType(new Position($LeftBrace), flag ? $typeFieldList.r : null);
		}
	|	Array Of Identifier // array of int
		{
			$r = new ArrayType(new Position($Array), Symbol.GetSymbol($Identifier.Text));
		}
	;

typeFieldList returns [FieldList r]
@init
{
	FieldList t = null;
}
	:	a = typeField
		{
			$r = $a.r;
			t = $r;
		}
		(Comma b = typeField
		{
			t.Tail = $b.r;
			t = t.Tail;
		}
		)* // a : int, b : string
	;

typeField returns [FieldList r]
	:	a = Identifier Colon b = Identifier // a : int
		{
			$r = new FieldList(new Position($a), Symbol.GetSymbol($a.Text), Symbol.GetSymbol($b.Text), null);
		}
	;

variableDeclaration returns [VariableDeclaration r]
	:	Var Identifier Assign expression // var a := 2
		{
			$r = new VariableDeclaration(new Position($Var), Symbol.GetSymbol($Identifier.Text), null, $expression.r);
		}
	|	Var id = Identifier Colon ty = Identifier Assign expression // var a : int := 2
		{
			$r = new VariableDeclaration(new Position($Var), Symbol.GetSymbol($id.Text), new NameType(new Position($ty), Symbol.GetSymbol($ty.Text)), $expression.r);
		}
	;

functionDeclarationList returns [FunctionDeclaration r]
@init
{
	FunctionDeclaration t = null;
}
	:	(functionDeclaration
		{
			if (t == null)
			{
				$r = $functionDeclaration.r;
				t = $r;
			}
			else
			{
				t.Next = $functionDeclaration.r;
				t = t.Next;
			}
		}
		)+
	;
functionDeclaration returns [FunctionDeclaration r]
	:	Function Identifier LeftParen typeFieldList? RightParen Equal expression // function foo() = 
		{
			$r = new FunctionDeclaration(new Position($Function), Symbol.GetSymbol($Identifier.Text), $typeFieldList.r, null, $expression.r, null);
		}
	|	Function id1 = Identifier LeftParen typeFieldList? RightParen Colon id2 = Identifier Equal expression // function foo() : int = 
		{
			$r = new FunctionDeclaration(new Position($Function), Symbol.GetSymbol($id1.Text), $typeFieldList.r, new NameType(new Position($id2), Symbol.GetSymbol($id2.Text)), $expression.r, null);
		}
	;

/*
 * Lexer Rules
 */

// Reserved Words
Array:'array';
Break:'break';
Do:'do';
Else:'else';
End:'end';
For:'for';
Function:'function';
If:'if';
In:'in';
Let:'let';
Nil:'nil';
Of:'of';
Then:'then';
To:'to';
Type:'type';
Var:'var';
While:'while';

// Operators
Comma:',';
Colon:':';
Semicolon:';';
LeftParen:'(';
RightParen:')';
LeftBrack:'[';
RightBrack:']';
LeftBrace:'{';
RightBrace:'}';
Dot:'.';
Plus:'+';
Minus:'-';
Times:'*';
Divide:'/';
Equal:'=';
NotEqual:'<>';
LessThan:'<';
LessEqual:'<=';
GreaterThan:'>';
GreaterEqual:'>=';
And:'&';
Or:'|';
Assign:':=';

//
Identifier:('a'..'z' | 'A'..'Z')('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*;

IntegerLiteral:('0'..'9')+;

//StringLiteral:'"' ( '\\' ('t'|'n'|'r'|'\"'|'\\'|'^'('a'..'z' | 'A'..'Z')) | '\\' ('0'..'9') ('0'..'9') ('0'..'9') | '\\' (' '|'\t'|'\r'|'\n')+ '\\' | ~('\\' | '"') )* '"';
StringLiteral
@init
{
	System.Text.StringBuilder buffer = new System.Text.StringBuilder();
}
@after
{
	Text = buffer.ToString();
}
	:	'\"' (
		'\\' (
				't' {buffer.Append('\t');}
			|	'n' {buffer.Append('\n');}
			|	'r' {buffer.Append('\r');}
			|	'\"' {buffer.Append('\"');}
			|	'\\' {buffer.Append('\\');}
			|	'^@' {buffer.Append('\0');}
			|	'^A' {buffer.Append('\u0001');}
			|	'^B' {buffer.Append('\u0002');}
			|	'^C' {buffer.Append('\u0003');}
			|	'^D' {buffer.Append('\u0004');}
			|	'^E' {buffer.Append('\u0005');}
			|	'^F' {buffer.Append('\u0006');}
			|	'^G' {buffer.Append('\a');}
			|	'^H' {buffer.Append('\b');}
			|	'^I' {buffer.Append('\t');}
			|	'^J' {buffer.Append('\n');}
			|	'^K' {buffer.Append('\v');}
			|	'^L' {buffer.Append('\f');}
			|	'^M' {buffer.Append('\r');}
			|	'^N' {buffer.Append('\u000E');}
			|	'^O' {buffer.Append('\u000F');}
			|	'^P' {buffer.Append('\u0010');}
			|	'^Q' {buffer.Append('\u0011');}
			|	'^R' {buffer.Append('\u0012');}
			|	'^S' {buffer.Append('\u0013');}
			|	'^T' {buffer.Append('\u0014');}
			|	'^U' {buffer.Append('\u0015');}
			|	'^V' {buffer.Append('\u0016');}
			|	'^W' {buffer.Append('\u0017');}
			|	'^X' {buffer.Append('\u0018');}
			|	'^Y' {buffer.Append('\u0019');}
			|	'^Z' {buffer.Append('\u001A');}
			|	'^[' {buffer.Append('\u001B');}
			|	'^\\' {buffer.Append('\u001C');}
			|	'^]' {buffer.Append('\u001D');}
			|	'^^' {buffer.Append('\u001E');}
			|	'^_' {buffer.Append('\u001F');}
			|	d1 = ('0'..'2') d2 = ('0'..'9') d3 = ('0'..'9')
				{
					int k = ($d1 - '0') * 100 + ($d2 - '0') * 10 + $d3 - '0';
					if (k < 0 || k > 255)
					{
						throw new RecognitionException("escape character out of range", input);
					}
					buffer.Append((char)k);
				}
			)
		|	'\\' (' '|'\t'|'\r'|'\n')+ '\\'
			{
				
			}
		|	c = ~('\\' | '\"')
			{
				buffer.Append((char)$c);
			}
		)* '\"'
	;

WhiteSpace:(' '|'\t'|'\r'|'\n')+ { Skip(); };

BlockComment:'/*' ( options { greedy = false; } : ( BlockComment | . ) )* '*/' { Skip(); };

LineComment: '//' ~('\n'|'\r')* { Skip(); };
  